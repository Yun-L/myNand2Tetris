* Ch. 7 VM 1: Stack Arithmetic
- first steps to building a compiler
- high-level -> intermediate code -> machine code
- intermediate code runs on a VM
** Background
*** p2 The VM Paradigm 
- two stage compilation model separates specifics of source high-level langage and target machine language
- compilers only need to replace the vm for each hardware platform, rather than reimplementing the entire compiler
- compilers for multiple high-level languages can share the same vm backend 
*** p4 The Stack Machine Model
- one option of where to put the operands and results of VM operations is on a stack
- arithmetic and logical expressions can be converted into stack operations
** VM Specification, Part 1
*** p7 General
- VM language will have 4 types of commands:
  - Arith. cmds: arith and logical operations on stack
  - Mem. access cmds: transfer data between stack and virtual memory
  - prgm flow cmds: facilitate cond. and uncond. branching operations
  - fn calling cmds: call fns and return from them
- Program and cmd structure:
  - vm commands appear in following formats: <command>, <command arg>, <command arg1 arg2>
  - // are comments
*** p8 Arithmetic and logical cmds
| cmd | ret val                 | comment             |
| add | x+y                     | int. addition       |
| sub | x-y                     | int. subtraction    |
| neg | -y                      | arithmetic negation |
| eq  | true if x=y, else false | equality            |
| gt  | true if x<y, else false | greater than        |
| lt  | true if x<y, else false | less than           |
| and | x and y                 | bit-wise and        |
| or  | x or y                  | bit-wise or         |
| not | not y                   | bit-wise not        |

- vm represents true as -1 (0xFFFF) and false as 0 (0x0000)
- 1 xor 1 == 0
*** p10 Memory access cmds
- see table 7 for memory segments seen by every VM function
- memory access cmds are just push and pop cmds of a stack
  - push <segment index> : push val of segment[index] onto the stack
  - pop <segment index> : pop stack item and store in segment[index]
*** p11 program flow cmds
| label <symbol>   | label declaration       |
| goto <symbol>    | unconditional branching |
| if-goto <symbol> | conditional branching   |
*** p11 function calling cmds
| function <fn name> <nLocals> | function dec, must include num of fn's local vars |
| call <fn name> <nArgs>       | fn invocation, must include num of arguments      |
| return                       | return control back to call function              |

- <fn name> is a symbol and <nLocals>, <nArgs> are non-negative integers
** Implementation
- VM program is a collection of one or more .vm files. order of .vm files does not matter
*** RAM Usage
- Hack computer consists of 32K 16-bit words. first 16K is general purpose RAM. next 16K has memory maps of I/O devices.
| RAM addresses | Usage                                                        |
|          0-15 | 16 virtual registers                                         |
|        16-255 | static variables (of all the VM functions in the VM program) |
|      256-2047 | Stack                                                        |
|    2048-16483 | Heap (used to store objects and arrays)                      |
|   16384-24575 | Memory mapped I/O                                            |

- virtual registers
| Register   | Name | Usage                                                   |
| RAM[0]     | SP   | Stack pointer: points to next topmost location in stack |
| RAM[1]     | LCL  | points to base of local segment                         |
| RAM[2]     | ARG  | points to base of argument segment                      |
| RAM[3]     | THIS | points to base of this segment(in heap)                 |
| RAM[4]     | THAT | points to base of that segment(in heap)                 |
| RAM[5-12]  | TEMP | hold contents of temp segment                           |
| RAM[13-15] | (-)  | general purpose registers                               |
*** Memory Segments Mapping
- *local, argument, this, that:* these are mapped directly on the HACK RAM. Locations are maintained by keeping physical base addresses in dedicated registers (LCL, ARG, THIS, THAT). Any access to i'th location of any of these segments would be base+i where base is the address stored at one of these registers
- *pointer, temp:* globally fixed and mapped directoly onto a fixed area in RAM. pointer segment is mapped to THIS and THAT registers (3, 4). temp segment is mapped to RAM[5-12]. pointer i would be i+3 in RAM. temp i would be i+5 in RAM.
- *constant:* does not occupy any actual space. just supplies the constant i.
- *static:* 
*** Assembly Language Symbols
+----------------+-------------------------------------------------------------+
| Symbol         | Usage                                                       |
+----------------+-------------------------------------------------------------+
| SP, LCL, ARG,  |pre defined symbols point to stack top and base addresses of |
|   THIS, THAT   |      virtual segments local, argument, this, and that       |
+----------------+-------------------------------------------------------------+
|R13-R15         | Can be used for any purpose                                 |
|                |                                                             |
+----------------+-------------------------------------------------------------+
|"f.j" symbols   | each static variable j in f.vm is translated into the       |
|                |assembly symbol f.j. eventuallly will be automatically       |
|                |allocated RAM locations by the HACK assembler                |
+----------------+-------------------------------------------------------------+
|Flow of control |The VM commands function, call, and label are handled by     |
|symbols (labels)|generating symbolic labels, to be described in chapter 8     |
|                |                                                             |
+----------------+-------------------------------------------------------------+
*** Program Structure
- VM translator should accept either a .vm file, or directory with .vm files
- translates the input files into a single .asm file in the same directory 
Parser:
Code:
Main:
* Ch. 8 VM 2: Flow Control
- introduce new stack-based mechanisms designed to handle nested subroutine calls (procedures, methods, functions)
- extends and finishes the VM translator from ch. 7. Will be used as a backend for the compiler in future chapters
- stack processing can also be used for dynamic memory management, parameter passing, and recursion.
** Background
- will be adding two final sets of commands: *program flow* commands for branching and *function* commands for handling subroutine calls.
*** Program Flow
- conditional jumps: using stack's top element, jump to specified dest. if not zero; otherwise execute next cmd
- can specify an address to jump to but can also use labels if symbolic labels are allowed.
*** Subroutine Calls
- subroutines must handle:
  - parameter passing, and optionally return a value from the subroutine
  - allocating memory for local variables of subroutine, and freeing the memory.
  - jumping to execute the subroutines code
  - jumping back to the original address after the subroutine terminates
- These must be handled taking into account that subroutines can be nested. In our case we will also support recursion (each recursion level must be executed independently of the other calls)
*** Stack-Based Implementation
- much like the fundamental commands, nested subroutine execution also follows a LIFO structure
**** Return address
- one implementation is to save the return address right before the subroutine is called and retrieve it right after the subroutine exits.
- the return address can be pushed and popped from the stack.
**** Parameter passing
- parameters can also be pushed onto the stack for the subroutine to pop
- a return value can be pushed back onto the stack when the subroutine finished
**** Local variables
- these can also be stored on the stack
- this strategy handles nested/recursive subroutines well since the call-stack is also a LIFO model
** VM Specification, Part 2
*** Program flow commands
+-------------+-------------------------------------------------------+
| *label c*   | labels function's current location in function's      |
|             |code. c is a string                                    |
+-------------+-------------------------------------------------------+
| *goto c*    | jumps to the c label. c must be in the same function  |
+-------------+-------------------------------------------------------+
| *if-goto c* | conditionally jumps to the c label. top most value in |
|             |                         stack                         |
|             |               is popped and jumps to c                |
|             |                if value is not zero. c                |
|             |                  must be in the same                  |
|             |                       function                        |
+-------------+-------------------------------------------------------+

*** Function commands
+--------------+------------------------------------------------+
| function f n | signals start of code of a function named f,   |
|              |with n local variables                          |
+--------------+------------------------------------------------+
| call f m     | call function f, stating that m arguments have |
|              |            been pushed to the stack            |
+--------------+------------------------------------------------+
| return       | return to calling function                     |
+--------------+------------------------------------------------+

*** The calling protocol
- calling function perspective:
  1. push all argumetns onto stack
  2. invoke the called function f "call f"
  3. function's return value appears at top of stack
  4. all memory segments (arguments, locals) are the same as before the call
- called function perspective:
  1. when called, the argument segment has been initialized with values by the caller. local variables have also been allocated and initialized to zero. The stack is empty and the static segment is set to the static segment of the current file.
  2. push return value onto the stack
- VM implementation perspective:
  1. when a function is called
     - save return address and segment pointers of calling function
     - allocate, initialize to zero, as many local variables needed
     - set local and argument segments of called function
     - transfer control to called function
  2. when a function returns
     - clear arguments and other junk from stack
     - restore local, argument, this, that segments of the calling function
     - transfer control back to calling function

*** Initialization
when VM starts or resets. the VM runs a bootstrapping function "Sys.init"

** Implementation
*** The Global Stack
- system memory of the VM is implemented by maintaining a global stack.
- when a function is called, a new block is added to the global stack (consisting of arguments, pointers, local variables, empty working stack)
*** Standard Mapping
- see pg. 12-13
*** Bootstrap code
- should initialize stack pointer and call Sys.init
- Sys.init should call main function of main program and enter infinite loop
* Ch. 9 The High Level Language
- Start the process of building a Jack compiler and a run-time environment
** Jack Formal Description
- see pg.6
* Ch. 10 Compiler 1: Syntax Analysis
** Background
- Tokenizer -> Parser -> Code Generation
- First group text into tokens
*** Recursive Descent Parsing
- top down approach
- non terminals can be recursively parsed until terminals are reached
** Specification
- see pg. 216
* Ch. 11 Compiler 2: Code Generation
- bridge the gap between the high-level language and the VM language
** Background
- compilation from high-level programs to a low-level language focuses on two issues: *data translation* and *command translation*
*** Data Translation pg. 232
- for each variable encountered, compiler must map it to a type
- compiler must also manage the variable's scope and life cycle
- a symbol table can accomplish this
- everytime an new identifier is encountered for the first time, new entry is added to the table. Then when the same identifier is encountered again later in the source code, compiler looks up the entry in the table
- example symbol table:
| name      | type    | kind     | # |
|-----------+---------+----------+---|
| nAccounts | int     | static   | 0 |
| status    | boolean | local    | 0 |
| name      | String  | argument | 1 |
| balance   | int     | field    | 2 |
| sum       | int     | argument | 0 |
- For example 'balance=balance+sum', from the symbol table compiler can translate balance to field 2 of current object, and sum to 0th argument of running subroutine
- identifiers need to be associated with a scope, can be implemented with a list of hash-tables in order of inner scope to outer
- *handling variables*
- low level memory allocation of variables was delegated to the VM back-end
- only need to worry about mapping variables to the virtual memory segments
- *handling arrays*
- arrays are almost always stored as sequences of consecutive memory locations
- *handling objects*
- pass the target object as the first hidden argument when a method is called
- also when a method is called, compiler must ensure that the called method belongns to the class
*** Commands Translation pg. 239
- convert expression to parse tree, then traverse the parse tree and generate VM code
- since the VM is stack based the tree can just be printed in postfix notation
** Specification pg. 241
