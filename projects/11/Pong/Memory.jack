// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array free_list;

    /** Initializes the class. */
    function void init() {
		let free_list = 2048;
		let free_list[0] = 14336;
		let free_list[1] = null;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		var Array mem;
		let mem = 0;
		return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		var Array mem;
		let mem = 0;
		let mem[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int curr_seg;
		var Array block;
		let curr_seg = 0;
		while (free_list[curr_seg] < size) {
			if (free_list[curr_seg + 1] = null) {
				return -1;
			}
			let curr_seg = free_list[curr_seg + 1];
		}
		let free_list[curr_seg] = free_list[curr_seg] - size - 1;
		let block = curr_seg + free_list + free_list[curr_seg] + 1;
		let block[-1] = size + 1;
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array segment;
		var int curr_seg;
		let segment = o - 1;
		let segment[1] = null;
		let curr_seg = 0;
		while (~(free_list[curr_seg + 1] = null)) {
			let curr_seg = free_list[curr_seg + 1];
		}
		let free_list[curr_seg + 1] = segment - 2048;
		return;
    }    
}
