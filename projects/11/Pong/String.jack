// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field int str_len, max_len;
	field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let max_len = maxLength;
		if (max_len > 0) {
			let str = Memory.alloc(maxLength);
		}
		let str_len = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (max_len > 0) {
			do Memory.deAlloc(str);
		}
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return str_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if ((j < 0) | ~(j < str_len)) {
			return -1;
		}
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if ((j < 0) | ~(j < str_len)) {
			return;
		}
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (~(str_len < max_len)) {
			return this;
		}
		let str[str_len] = c;
		let str_len = str_len + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if (str_len = 0) {
			return;
		}
		let str_len = str_len - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int loop_count, val;
		var boolean neg;
		let val = 0;
		let loop_count = 0;
		let neg = false;

		if (str[loop_count] = 45) {
			let neg = true;
			let loop_count = loop_count + 1;
		}
		
		while (loop_count < str_len) {
			if ((str[loop_count] < 48) | (str[loop_count] > 57)) {
				return val - 48;
			}
			let val = val*10 + str[loop_count] - 48;
			let loop_count = loop_count + 1;
		}

		if (neg) {
			let val = -val;
		}
		
		return val;
	}

	method void setInt_help(int val) {
		var int last_digit;
		let last_digit = val/10;
		let last_digit = val - (10*last_digit);
		if (val < 10) {
			do appendChar(val + 48);
			return;
		} else {
			do setInt_help(val/10);
			do appendChar(last_digit + 48);
			return;
		}
	}

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		let str_len = 0;
		if (val < 0) {
			do appendChar(45);
			do setInt_help(-val);
			return;
		}
		do setInt_help(val);
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
