// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static boolean color;

    /** Initializes the Screen. */
    function void init() {
		let color = true;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int row_count, col_count;
		let row_count = 0;
		let col_count = 0;
		do Screen.setColor(false);
		while (row_count < 256) {
			while (col_count < 512) {
				do Screen.drawPixel(col_count, row_count);
				let col_count = col_count + 1;
			}
			let row_count = row_count + 1;
		}
		do Screen.setColor(true);
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int old_word, new_word, bit, bit_val;

		if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
			return;
		}

		let bit = x/16;
		let bit = x - (bit * 16);
		let bit_val = 1;
		while (bit > 0) {
			let bit_val = bit_val + bit_val;
			let bit = bit - 1;
		}
		let old_word = Memory.peek(16384 + (y * 32) + (x / 16));
		let new_word = old_word | bit_val;
		if (~color) {
			let new_word = new_word - bit_val;
		}
		do Memory.poke((16384 + (y * 32) + (x / 16)), new_word);
		return;
    }

	function void draw_vert(int x, int y1, int y2) {
		var int dy, start_y, count;
		let dy = y2 - y1;
		if (dy < 0) {
			let start_y = y2;
			let dy = -dy;
		} else {
			let start_y = y1;
		}

		let count = 0;
		while (count < dy) {
			do Screen.drawPixel(x, start_y + count);
			let count = count + 1;
		}
		
		return;
	}

	function void draw_hor(int y, int x1, int x2) {
		var int dx, start_x, count;
		let dx = x2 - x1;
		if (dx < 0) {
			let start_x = x2;
			let dx = -dx;
		} else {
			let start_x = x1;
		}

		let count = 0;
		while (count < dx) {
			do Screen.drawPixel(start_x + count, y);
			let count = count + 1;
		}
		
		return;
	}

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int cond_state, dx, dy, a, b, start_x, start_y;

		if (x1 = x2) {
			do Screen.draw_vert(x1, y1, y2);
			return;
		}

		if (y1 = y2) {
			do Screen.draw_hor(y1, x1, x2);
			return;
		}
		
		let dx = x2 - x1;
		let dy = y2 - y1;

		if (dx < 0) {
			let start_x = x2;
			let start_y = y2;
			let dx = -dx;
			let dy = -dy;
		} else {
			let start_x = x1;
			let start_y = y1;
		}
		
		let a = 0;
		let b = 0;
		let cond_state = 0;

		if (dy > 0) {
			while (~(a > dx) & ~(b > dy)) {
				do Screen.drawPixel(start_x + a, start_y + b);
				if (cond_state < 0) {
					let a = a + 1;
					let cond_state = cond_state + dy;
				} else {
					let b = b + 1;
					let cond_state = cond_state - dx;
				}
			}
		} else {
			while (~(a > dx) & ~(b < dy)) {
				do Screen.drawPixel(start_x + a, start_y + b);
				if (cond_state < 0) {
					let a = a + 1;
					let cond_state = cond_state - dy;
				} else {
					let b = b - 1;
					let cond_state = cond_state - dx;
				}
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int dx, dy, count_x, count_y, start_x, start_y;
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);

		if (x1 > x2) {
			let start_x = x2;
		} else {
			let start_x = x1;
		}

		if (y1 > y2) {
			let start_y = y2;
		} else {
			let start_y = y1;
		}

		let count_x = 0;
		while (~(count_x > dx)) {
			let count_y = 0;
			while (~(count_y > dy)) {
				do Screen.drawPixel(start_x + count_x, start_y + count_y);
				let count_y = count_y + 1;
			}
			let count_x = count_x + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int count, level;

		if ((r > 181) | (r < 0)) {
			return;
		}
		
		let count = -r;

		while (~(count > r)) {
			let level = Math.sqrt((r*r)-(count*count));
			do Screen.drawLine(x - level, y + count, x + level, y + count);
			let count = count + 1;
		}
		return;
    }
}
