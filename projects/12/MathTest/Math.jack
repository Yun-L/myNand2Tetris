// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array two_powers;

    /** Initializes the library. */
    function void init() {
		var int tp_count;

		let two_powers = Array.new(16);
		let two_powers[0] = 1;
		let tp_count = 1;
		while (tp_count < 16) {
			let two_powers[tp_count] = two_powers[tp_count-1] + two_powers[tp_count-1];
			let tp_count = tp_count + 1;
		}
		return;
	}

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
		    return -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */

    function int multiply(int x, int y) {
			 var int sum, curr_x, loop_count;
			 let sum = 0;
			 let curr_x = x;
			 let loop_count = 0;
			 while  (loop_count < 16) {
				if (Math.bit(y, loop_count)) {
					let sum = sum + curr_x;
				}
				let curr_x = curr_x + curr_x;
				let loop_count = loop_count + 1;
			 }
		return sum;
    }

	/** Returns true if the j-th bit of the integer x is 1 and false otherwise. */
	function boolean bit(int x, int j) {
		if (~(x & two_powers[j] = 0)) {
			return true;
		}
		return false;
	}

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		if (x < 0 & y < 0) {
		    return Math.divide_help(-x, -y);
		}

		if (x < 0 | y < 0) {
		    return -(Math.divide_help(Math.abs(x), Math.abs(y)));
		}

		return Math.divide_help(x, y);
	}

	function int divide_help(int x, int y) {
		var int q;
		if (y > x) {
			return 0;
		}
		let q = Math.divide_help(x, y + y);
		if ((x - ((q+q)*y)) < y) {
			return q + q;
		} else {
			return q + q + 1;
		}
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, loop_count, if_cond;
		let y = 0;
		let loop_count = 7;
		while (loop_count > -1) {
			let if_cond = (y + two_powers[loop_count])*(y + two_powers[loop_count]);
			if (~(if_cond > x) & (if_cond > 0)) {
				let y = y + two_powers[loop_count];
			}
			let loop_count = loop_count - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b) {
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b) {
			return a;
		}
		return b;
    }
}
