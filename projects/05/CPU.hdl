// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

	// Load instruction as value or use ALU output
	
	Mux16		( a = instruction,
				  b = aluOut,
				  sel = instruction[15], // i
				  out = aOrAlu ); 

	// Loading into A register and Sending to memory

	Not ( in = instruction[15], out = ifA );

	Or 		   ( a = ifA,
			     b = instruction[5], // d1
				 out = loadRegA );

	ARegister  ( in = aOrAlu,
			     load = loadRegA,
				 out = regA );

	And16	   ( a = regA,
			     b = regA,
				 out[0..14] = addressM );


	// Load A value or M[A]

	Mux16	   ( a = regA,
			     b = inM,
				 sel = instruction[12], // a
				 out = aOrM );


    // Loading into D register

	And		   ( a = instruction[15], // i
			     b = instruction[4],  // d2
				 out = loadRegD );

    DRegister  ( in = aluOut,
			     load = loadRegD,
				 out = regD );


    // ALU inputs

	And		   ( a = instruction[11],
			   	 b = instruction[15],
				 out = c1 );

	And		   ( a = instruction[10],
			     b = instruction[15],
				 out = c2 );

    And		   ( a = instruction[9],
			     b = instruction[15],
				 out = c3 );

    And		   ( a = instruction[8],
			     b = instruction[15],
				 out = c4 );

    And		   ( a = instruction[7],
			     b = instruction[15],
				 out = c5 );

    And		   ( a = instruction[6],
			     b = instruction[15],
				 out = c6 );

    ALU		   ( x = regD,
			     y = aOrM,
				 zx = c1,
				 nx = c2,
				 zy = c3,
				 ny = c4,
				 f = c5,
				 no = c6,
				 out = aluOut,
				 zr = zr,
				 ng = ng );
				 

	// Writing to Memory

	And16	   ( a = aluOut,
			     b = aluOut,
				 out = outM );

	And		   ( a = instruction[15], // i
			     b = instruction[3],  // d3
				 out = writeM );


    // Program Counter

	Or 		   ( a = ng,
			     b = zr,
				 out = ngOrZr );

	Not		   ( in = ngOrZr,
			     out = nl );

    And		   ( a = ng,
			     b = instruction[2],
				 out = ifNg );

    And		   ( a = zr,
			     b = instruction[1],
				 out = ifZr );

    And		   ( a = nl,
			     b = instruction[0],
				 out = ifNl );

	Or		   ( a = ifNg,
			     b = ifZr,
				 out = jumpCondTmp );

    Or		   ( a = jumpCondTmp,
			     b = ifNl,
				 out = jumpCondTmp2 );

	And		   ( a = jumpCondTmp2,
			     b = instruction[15], // i
				 out = jumpCond );

    PC		   ( in = regA,
			     load = jumpCond,
				 inc = true,
				 reset = reset,
				 out[0..14] = pc );

}